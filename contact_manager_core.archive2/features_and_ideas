Contacts Manager:

Allows creating custom data objects (classes or documents which hold information). 


All documents, and custom documents can contain variables that are the following types: 
ObjectId : reference to another MongoDB document. Arrays will not be implemented, ObjectId must be used for this. 
Number : integer, decimal, floating point etc. 
String : string, text, character etc. 
Date : in UTC always. 
Boolean : true, false

All documents support pre-processing and post-processing in the form of triggers. These triggers are defined by javascript functions. These triggers can be used for setting up callbacks similar to rails. see: http://api.rubyonrails.org/classes/ActiveRecord/Callbacks.html

isValid() - checks if the object is valid, and generate errors methods (model will expose an addError(path, error_message) method to provide this)
beforeValidate() - runs right before the object is validated, by isValid(), parameters from isValid may omit beforeValidate() from executing. 
validate() - 
afterValidate() - 
beforeSave() - 
save() - 
afterSave() - 

The exposed javascript can be functions written by the end-user. The api exposed should only allow the fields consistent with the object schema. eg. 
if a Person = { name: String, DOB: Date}; a function cannot be used to access or create Person.gender if the property is not allowed by the object schema. 

Callback flow: 

validate() -> beforeValidate().then(validate()).then(afterValidate());
isValid() -> return validate();
save() -> beforeSave().then(save()).then(afterSave());

afterSave() cannot commit to the database.

Callbacks are stored in the metadata collection as described below: 
callbacks : {
	validate : [
		{
			validate1 :{
					order: 1,
					method: function(){
						console.log("validate1");
					}
				}
		},
		{
			validate1 : {
				order : 2, 
				method : function(){
					console.log("validate1");
				}
			}
		}
	]
}